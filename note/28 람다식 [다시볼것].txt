@ 람다식
    - 자바에서 함수형 프로그래밍을 구현하는 방식
    - 함수 베이스로 프로그래밍을 함.
    - 매개변수를 받아 사용하고 외부변수를 사용하지 않음. 순수함수라고 함.
    - 외부변수를 사용하지 않기 때문에 외부에 사이드이펙트를 주지 않음.
    - 이 함수 내에서 다른 외부의 값이 변하지 않기 때문에. 병렬 처리가 가능하다
    - 함수형 인터페이스를 선언함


# 함수형 프로그래밍이란?
    - 순수함수를 구현하고 호출
    - 입력 받은 자료를 기반으로 수행되고 외부에 영향을 미치지 않기 때문에 병렬적으로 처리할 수 있다.


# 람다식 문법
    메소드 이름이 없음,

    1) 매개 변수가 하나인 경우 괄호 생략 가능 (2개는 안 됨)
        str -> {sout(str);}
        str -> sout(str);
        str1, str2 -> sout(str1+str2); // X
        (str1, str2) -> sout(str1+str2); // O

    2) 중괄호 안의 구현부가 한 문장이 경우 중괄호 생략
        str -> sout(str);
        str -> sout(str); sout(str); // X
        str -> { sout(str); sout(str); } // O

    ????? 3) 중괄호 안의 구현부가 한 문장이라도 return 문은 중괄호를 생략할 수 없다.
        str -> return str.length(); // X
        str -> { return str.length(); } // O

    ?????? 4) 중괄호 안의 구현부가 반환문 하나라면 return과 중괄호를 모두 생략할 수 있음
        (x,y)->x+y;
        str->str.length()


# 함수를 변수처럼 사용하는 람다식

    프로그램에서 변수는
        (1) 자료형에 기반하여 선언 (int a;)
        (2) 매개변수로 전달하고 (int add(int x, int y);)
        (3) 메서드의 반환 값으로 사용 (return num;)
    >>>>>>>  람다식은 프로그램 내에서 변수처럼 사용 가능하다.


[실습 1]
    @FunctionalInterface
    public interface MyMaxNumber {
        int getMaxNumber(int x, int y);
    }
    1) @FunctionalInterface 를 붙인 인터페이스 형태
    2) 메소드는 단 한개만 가지고 있어야 한다.

    void main() {
        MyMaxNumber max = (x,y)->(x>=y)?x:y;
        sout(max.getMaxNumber(10,20));
    }
    // 중괄호 안의 구현부가 반환문 하나라면 return과 중괄호를 모두 생략할 수 있음


[실습 2]
    interface StringConcat {
        void makeString(String s1, String s2);
    }

    class StringConImpl implements StringConcat {
        @Override
        void makeString(String s1, String s2) {
            sout(s1 + ", " + s2);
        }
    }

    class TestStringConcat {
        psv main() {
            StringConImpl impl = new StringConImpl();
            impl.makeString("hello", "world");

            StringConcat concat = (s, v)->sout(s + ", " +v);
            concat.makeString("hello", "world");

            StringConcat concat2 = new StringConcat() {
              public void makeString(String s1, String s2) {
                sout(s + ", " + v);
              }
            }
            concat2.makeString("hello", "world");
        }
    }


[실습 3]
    interface PrintString {
        void showString(String str);
    }

    public class TestLambda {
        psv main() {
            PrintString lambdaStr = s->sout(s);
            // (1) 함수의 구현부가 대입 (변수에 대입되듯이)
            lambdaStr.showString("test");

            showMyString(lambdaStr);
            // (2) 매개변수로 람다식이 전달됨

            PrintString test = returnString();
            test.showString("test3");
        }
        psv showMyString(PrintString p) {
            p.showString("test2");
        }
        ps PrintString returnString() {
            return s->sout(s);
            // (3) 리턴값으로 람다식을 리턴 가능
        }
    }