@ static 변수, 메서드

- 같은 클래스라도 멤버변수, 멤버메서드는 인스턴스마다 각자 다름.
- 전체 인스턴스가 하나의 값을 공유해야 하는 경우 static 사용

- 처음 프로그램 로드 시 데이터 영역에 자리잡음
  (데이터 영역, 스태틱 영역, 상수 영역)
- 클래스 이름으로 참조
- 변수의 구분: 클래스 변수 / 정적 변수 / static 변수
    cf. 일반 멤버 변수는 new 할 때 힙에 생성됨
- static 변수는 보통 private으로 하는 경우가 많다.
- non static 메소드에서 static 변수 사용 가능
- static 메소드에서 non static 변수 사용 불가능
(만들어지지 않는 경우가 있기 때문)


@ static 응용 - singleton pattern
- 프로젝트 내에 단 하나만 존재하는 인스턴스가 있을 수 있다. 이 때 singleton pattern 을 사용한다.
- 생성자는 private으로
- static으로 유일한 객체 생성
- 외부에서 객체 참조하는 방법은 단 하나. public static get() 으로 구현

public class Company {
    private static Company instance = new Company();

    private Company() {} // private constructor

    public static Company getInstance() { --> 외부에서 가져다 쓰라고 static으로 정의
        if (null == instance) {
            instance = new Company();
        }
        retrun instance;
    }
}

public class CompanyTest()
{
    public static void main(String[] args) {
        Company company = Company.getInstance();
    }
}