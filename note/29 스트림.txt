@ 스트림
    - 자료의 대상과 관계없이 동일한 연산을 수행할 수 있는 기능(자료의 추상화)
    - 배열, 컬렉션에 동일한 연산이 수행되어 일관성 있는 처리 가능
    - 한번 생성하고 사용한 스트림은 재사용할 수 없음
    - 스트림 연산은 기존 자료를 변경하지 않음
    - 중간 연산과 최종 연산으로 구분됨
    - 최종 연산이 수행되어야 모든 연산이 적용되는 지연 연산

# 스트림 연산 - 중간 연산
    1) 스트림 생성: stream()
    2) 중간 연산: filter(), map()
    3) 최종 연산: forEach(), count(), sum(), ...

(ex)
    sList.stream()
        .filter(s->s.length()>=5)
        .forEach(s->sout(s));
    
    customerList.stream()
        .map(c->c.getName())
        .forEach(s->sout(s));

# reduce() 연산
    - 정의된 연산이 아닌 프로그래머가 직접 연산을 정의할 때
    - 최종 연산으로 스트림의 요소를 소모하며 연산 수행

    Arrays.stream(arr).reduce(0, (a,b)->a+b));
    0: 초기값, 배열의 모든 요소의 합을 구한다.

(ex)
    class IntArrayTest {
        psv main() {
            int[] arr = {1,2,3,4,5};
            int sum = Arrays.stream(arr).sum();
            int count = (int) Arrays.stream(arr).count();
        }
    }

(ex)
    class ArrayListStreamTest {
        psvm() {
            List<String> sList = new ArrayList<String>();
            sList.add("A");
            sList.add("B");
            sList.add("C");

            Stream<String> stream = sList.stream();
            stream.forEach(str -> sout(str));

            sList.stream().sorted().forEach(s->sout(s));
            // Stream 은 comparable 이 구현되어 있기 때문에 sorted() 가능

            sList.stream().map(s->s.length()).forEach(len->sout(len));
        }
    }


(ex)
    String[] greetings = {"안녕하세요~~~", "hello" "Good morning", "반갑습니다."};
    String longestStr =
        Arrayas.stream(greetings).reduce("", (s1, s2)-> {
            if(s.getBytes().length >= s2.getBytes().length) return s1;
            else return s2;
        });
    sout(longestStr);

    한글은 2바이트이므로 getBytes() 후 비교하자.


(ex)
    class CompareString impl BinaryOperator<String>{
        @Override
        public String apply(Str s1, Str s2) {
            if(s1.getBytes().length >= s2.getBytes().length) return s1;
            else return s2;
        }
    }

    String[] greetings = {"안녕하세요~~~", "hello" "Good morning", "반갑습니다."};
    String longestStr = Arrayas.stream(greetings).reduce(new CompareString()).get());
