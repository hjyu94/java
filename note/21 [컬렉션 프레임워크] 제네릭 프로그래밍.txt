@ 컬렉션 프레임워크 - 제네릭 프로그래밍

    자바에서 여러 자료구조와 알고리즘을 구현해놓은 라이브러리.
    ArrayList, 배열, 링크드리스트가 구현되어있는 라이브러리.

    이전에 제네릭 프로그래밍 방식을 배우면 좋다.
    (C++ 의 템플릿과 유사한 방식)

    변수를 선언할 때 데이터 타입을 명시해서 사용하는데 어떤 변수가 여러 타입으로 변형되어 사용될 수 있는 경우 제네릭 프로그래밍 방식을 사용한다.
    컴파일러가 실제 사용되는 참조 자료형으로 변환시키기 때문에 안정적이다.


(ex) 제네릭 클래스, 자료형 매개변수 T

    public class GenericPrinter<T> {
        private T material;
        ....
    }

    public static void main() {
       GenericPrinter<Powder> powderPrinter = new GenericPrinter<>();
       // <> 연산자 안에 자료형을 쓰지 않아도 컴파일러가 넣어준다.

       GenericPrinter printer = new GenericPrinter();
       // 아예 타입을 안 쓸수도 있다.
       // T 를 Object 타입으로 처리한다.
    }

(ex) 자료형 매개변수로 특정 클래스를 상속받은 클래스만 쓰는 방법

    public class GenericPrinter<T extends Material> {
        private T material;
        ....
    }
    // Material 을 상속받은 클래스만 자료형 매개변수로 쓸 수 있다.
    // 원래 GenericPrinter 클래스에서 T 타입의 변수는 Object의 메소드만 사용했지만
        extends 를 사용하므로써 Material 의 메소드도 사용 가능해진다.


(ex) 제네릭 메서드

    public class Shape<T> {
        public static <T, V> double makeRectangle(Point<T, V> p1, Point<T, V> p2) {
            ...
        }
    }

    - 메서드의 매개 변수를 자료형 매개변수로 사용하는 메서드
    - 메서드 내에서의 자료형 매개변수는 메서드 내에서만 유효하다 (지역변수 같은 개념)
    - Shape class의 T와 makeRectangle method의 T는 다른 의미