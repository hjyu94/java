@ Object class (toString, equals, hashCode, clone, finalize)

- 자바의 모든 클래스의 최상위 클래스
- java.lang.Object class
- 컴파일러가 extends Object를 넣어준다.
- 모든 클래스는 Object 클래스의 일부 메서드를 재정의해 사용 가능(final 메소드 제외)

# toStrign()
    - 원형: getClass().getName() + '@' + Integer.toHexString(hashCode())

# eqauls()
    : 두 개의 객체가 동일한지?
    : Lee.equals(Shin) = (Lee == Shin)
    : 물리적으로 다른 메모리에 위치한 객체라도 논리적으로 동일함을 구현하기 위해 재정의하는 경우가 있다.

# hashCode()
    - 자바의 JVM가 인스턴스가 생성했을 때 주는 메모리 주소값을 해쉬코드라고 한다.
    - hashCode() : 인스턴스가 저장된 가상머신의 주소를 10진수로 반환

# equals() 가 true인 경우
    1) 논리적으로 두 객체가 동일한 경우
        : 실제적인 메모리 주소는 달라도 이름과 학번이 같은 객체

    2) hashCode() 의 값이 같은 경우
        : 원래는 메모리주소값을 반환하지만 재정의되어있는 경우가 있다.
        : Integer i1 = 100; Integer i2 = 200; -> i1.hashCode() = i2.hashCode()
        --> equals()를 재정의했다면 보통 hashCode() 도 재정의한다.

# 그렇다면 실제 메모리 주소를 확인하려면?
    - hashCode()는 재정의 될 수 있기 때문에 늘 메모리 주소값을 반환한다고 보장할 수 없다.
    - System.identifyHashCode(i1) 을 사용하면 된다.

# clone()
    - 기본틀로부터 같은 속성값을 가진 객체의 복사본 생성
    - 정보은닉에 위배 될 가능성(private 변수를 그대로 복사해오는 경우 등)이 있으므로 복제할 객체는 cloneable 인터페이스를 명시해야 한다

    class Book implements Cloneable { ... }
    Book book2 = (Book)book.clone();

# finalize()
    - 우리가 직접 부르는 메소드가 아니고 인스턴스가 해제될 때 가비지 컬렉터에 의해서 수행되는 메소드.
    - 주로 하는 일은 리소스의 해제나 혹시 닫히지 않았을 소켓을 닫는 등의 일이 수행된다
