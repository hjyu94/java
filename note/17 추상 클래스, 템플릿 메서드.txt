# 추상 클래스

    - 구현 코드가 없이 선언부만 있는 메서드
    - 추상 클래스는 인스턴스화 불가능(new)
    - 추상함수를 하나라도 가지고 있는 클래스라면 그 클래스도 추상클래스여야 한다.
        public abstract class Computer {
            public abstract void display();
        }
    - 모든 메서드가 구현되었다고 해도 클래스에 abstract 키워드가 있으면 추상 클래스이다.
        -> 상속만 해서 사용하도록 할 때 이와 같이 사용된다.
    - 추상클래스를 사용하는 이유?
        : 상속해서 확장하여 사용하도록 유도하려고


@ 템플릿 메서드(추상 클래스 응용)(디자인 패턴)

    - 템플릿 메서드
        : 추상 메서드나 구현된 메서드를 활용해서 전체 흐름을 정의해놓은 메서드.
        : final로 선언하여 재정의 할 수 없도록 한다.

    - 템플릿 메서드 패턴
        : 디자인 패턴의 일종
        : 프레임 워크에서 많이 사용되는 패턴
        ; 전체 구현의 흐름을 정의하고 구체적인 각 메서드 구현은 하위 클래스에 위임함
        : 하위 클래스가 다른 구현을 했더라도 템플릿 메서드에 정의된 시나리오대로 수행됨.

    public abstract class Car {
        public abstract void drive();
        public abstract void stop();

        public void startCar() {
            print("시동을 켭니다");
        }
        public void turnOff() {
            print('시동을 끕니다");
        }

        final public void run() { // 오버라이딩 불가, 템플릿 패턴
            startCar();
            drive();
            stop();
            turnOff();
        }
    }

    class AICar extends Car;
    class ManualCar extends Car;

    인공지능, 수동 자동차 두 종류가 있다.
    drive(), stop() 은 다른 방식으로 구현될 수 있도록 했지만
    run()의 경우 재정의 할수 없도록 하여 이미 정의된 시나리오대로만 작동할 수 있도록 final 키워드를 사용한다 -> 템플릿 패턴


# final
    - final 변수는 값이 변경 될 수 없는 상수라는 표시
      (public static final double PI = 3.14; 처럼 static과 자주 사용)
    - final 메서드는 재정의 할 수 없다.
    - final 클래스는 더 이상 상속할 수 없다
      (ex: java의 String class)

    public class Define {
        public static final int MIN = 1;
        public static final int MAX = 99999;
    }
    --> 이렇게 만들어 놓고 사용하면 편리하다
    --> static 멤버변수이기 때문에 객체를 인스턴스하지 않고도 클래스명으로 바로 가져다 사용 할 수 있다.
        (ex. print(Define.MIN); )